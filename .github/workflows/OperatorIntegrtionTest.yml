# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: OperatorIntegrationTest.yml
on:
  push:
    branches:
      - lisaguo-op-integ
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  AmazonCloudWatchAgentOperatorIntegrationTest:
    name: AmazonCloudWatchAgentOperatorIntegrationTest
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Start minikube
        uses: medyagh/setup-minikube@master

      - name: Deploy cert-manager to minikube
        run:
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml

#      - name: Verify minikube and cert-manager
#        run: |
#          sleep 10
#          kubectl get pods -A

      - name: Build image
        run: |
          eval $(minikube docker-env)
          make container
          docker images

      - name: Deploy operator to minikube
        run:
          make deploy

      - name: Verify pods and operator logs
        run: |
          sleep 10
          kubectl get pods -A
          kubectl logs -l app.kubernetes.io/name=amazon-cloudwatch-agent-operator -n amazon-cloudwatch --tail=100

      - name: Apply cloudwatch-agent.yaml
        run: |
          cd integration-tests/operator
          kubectl apply -f ./amazoncloudwatchagent.yaml
          sleep 60
          kubectl get pods -A
          kubectl get pods -n amazon-cloudwatch 
          kubectl describe pods -n amazon-cloudwatch
          pod_name="$(kubectl get pods -n amazon-cloudwatch -l app.kubernetes.io/component=amazon-cloudwatch-agent,app.kubernetes.io/instance=amazon-cloudwatch.cloudwatch-agent -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
          if [ -z "$pod_name" ]; then
            echo "Pod $pod_name is not running. Exiting with ERROR."
            echo "Testcase 1: Pod is not created test case: FAIL"
          else
            echo "Pod $pod_name is running."
            echo "Testcase 1: Pod is created test case: PASS"
          fi
#      - name: Building the validate_instrumentation binary
#        run: |
#          cd integration-tests/operator/cmd
#          go build validate_instrumentation.go

      - name: Test default instrumentation
        run: |
          cd integration-tests/operator
          kubectl apply -f ./test-deployment.yaml
          sleep 10
          cd ./cmd
          go run validate_instrumentation_vars.go default default_instrumentation_env_variables.json
      - name: Test namespace instrumentation
        run: |
          cd integration-tests/operator
          kubectl apply -f ./sample-instrumentation.yaml
          kubectl apply -f ./ns-test-deployment.yaml
          sleep 60
          cd ./cmd
          kubectl rollout restart deployment nginx -n amazon-cloudwatch
          go run validate_instrumentation_vars.go amazon-cloudwatch ns_instrumentation_env_variables.json
      # Apply amazoncloudwatchagent.yaml

      # Verify cloudwatch-agent deployed in amazon-cloudwatch namespace as daemonset with 2 pods

      # Apply test-deployment.yaml

      # Verify test deployment succeeds

      # Verify default instrumentation values

      # Apply sample-instrumentation.yaml

      # Verify overwritten instrumentation values defined in the yaml