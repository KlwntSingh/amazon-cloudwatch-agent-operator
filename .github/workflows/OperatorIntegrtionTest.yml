# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: Amazon CloudWatch Agent Operator Integration test
env:
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  ECR_OPERATOR_STAGING_IMAGE: ${{ secrets.ECR_OPERATOR_STAGING_IMAGE }}

on:
  push:
    branches:
      - main*
      - addOperatorIntgTest
  workflow_dispatch:
    inputs:
      addon_name:
        required: true
        type: string
        default: "amazon-cloudwatch-observability"
        description: "EKS addon name"
      addon_version:
        required: true
        type: string
        default: "v1.1.0-eksbuild.1"
        description: "EKS addon version"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
#  GenerateTestMatrix:
#    name: 'GenerateTestMatrix'
#    runs-on: ubuntu-latest
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
#          aws-region: us-west-2
#
#      - name: Generate matrix
#        id: set-matrix
#        run: |
#          echo "::set-output name=matrix::$(echo $(cat integration-tests/generator/k8s_versions_matrix.json))"
#
#      - name: Echo test plan matrix
#        run: |
#          echo "matrix: ${{ steps.set-matrix.outputs.matrix }}"
#  needs: [GenerateTestMatrix]
#  strategy:
#    fail-fast: false
#    matrix:
#      arrays: ${{ fromJson(needs.GenerateTestMatrix.outputs.matrix) }}
#      platform: [ ubuntu-core-22-amd64 ]
  AmazonCloudWatchAgentOperatorIntegrationTest:
    name: AmazonCloudWatchAgentOperatorIntegrationTest
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2

      - name: Login to ECR
        if: steps.cached_binaries.outputs.cache-hit == false
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-qemu-action@v1

      - name: Build Cloudwatch Agent Operator Image and push to ECR
        uses: docker/build-push-action@v4
        if: steps.cached_binaries.outputs.cache-hit == false
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ${{ env.ECR_OPERATOR_STAGING_IMAGE }}
          platforms: linux/amd64, linux/arm64

      - name: Store operator-build
        run: echo APM_YAML="${{ github.workspace }}/dist/apm.yaml" >> $GITHUB_ENV

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform apply
        uses: nick-fields/retry@v2
        with:
          max_attempts: 1
          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster
          retry_wait_seconds: 5
          command: |
            cd integration-tests/terraform/testbuild
            terraform init
            if terraform apply --auto-approve; then
                cd cmd
                ./pod_status_test.sh
                if [ $? -ne 0 ]; then
                  echo "Pod is not in running state"
                  echo "TestCase 1: Daemonset Pod Running Status: FAIL"
                  terraform destroy  -auto-approve && exit 1
                else
                  echo "Pod in running state"
                  echo "TestCase 1: Daemonset Pod Running Status: PASS"  
                fi
                go run ./test_default_instrumentation_main.go
                if [ $? -ne 0 ]; then
                  echo "TestCase 2: Default Instrumentation Annotation Injection Test: FAIL"
                  terraform destroy  -auto-approve && exit 1
                else
                  echo "TestCase 2: Default Instrumentation Annotation Injection Test: PASS"
                fi
                go run ./test_ns_instrumentation_main.go
                if [ $? -ne 0 ]; then
                  echo "Namespace Instrumentation annotation test failed"
                   echo "TestCase 3: Same Namespace Instrumentation Annotation Injection Test: FAIL"
                  terraform destroy  -auto-approve && exit 1
                else
                  echo "TestCase 3: Same Namespace Instrumentation Annotation Injection Test: PASS"
                fi
            else
                terraform destroy  -auto-approve && exit 1
            fi

      - name: Terraform destroy
        if: ${{ cancelled() || failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: |
            cd integration-tests/terraform/eks
            terraform destroy -var="beta=true" --auto-approve
